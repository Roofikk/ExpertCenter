@using ExpertCenter.MvcApp.Models.Column
@using ExpertCenter.DataContext.Entities
@model ProductCreateModel

@{
    ViewData["Title"] = "Create";
}

<h1>Добавление товара в прайс-лист</h1>

<hr />
<div class="row gap-2">
    <div>
        <a asp-action="Details"
           asp-controller="PriceLists"
           asp-route-id="@Model.PriceListId"
           class="btn btn-secondary">Вернуться обратно к прайс листу</a>
    </div>
    <div class="col-xl-4 col-lg-6 col-md-6 col-12">
        <form asp-action="Create">
            <input type="hidden" asp-for="PriceListId" />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="ProductName" class="control-label" required="true"></label>
                <input asp-for="ProductName" class="form-control" />
                <span asp-validation-for="ProductName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Article" class="control-label" required="true"></label>
                <input asp-for="Article" class="form-control" />
                <span asp-validation-for="Article" class="text-danger"></span>
            </div>

            <div id="otherColumns">
                @for (int i = 0; i < Model.Columns.Count; i++)
                {
                    <input name="Columns[@i].ColumnId" type="hidden" value="@Model.Columns[i].ColumnId" />
                    <input name="Columns[@i].ColumnTypeId" type="hidden" value="@Model.Columns[i].ColumnTypeId" />
                    <input name="Columns[@i].ColumnName" type="hidden" value="@Model.Columns[i].ColumnName" />
                    <div class="form-group">
                        <label id="Columns[@i].ColumnName" class="control-label" required="true">@Model.Columns[i].ColumnName</label>
                        @switch (Model.Columns[i].ColumnTypeId)
                        {
                            case nameof(IntColumn):
                                <input id="Columns[@i].Value"
                                       name="Columns[@i].Value"
                                       type="number"
                                       class="form-control"
                                       value="0" />
                                break;
                            case nameof(StringTextColumn):
                                <textarea id="Columns[@i].Value"
                                          name="Columns[@i].Value"
                                          rows="3"
                                          class="form-control"></textarea>
                                break;
                            case nameof(VarCharColumn):
                                <input id="Columns[@i].Value"
                                       name="Columns[@i].Value"
                                       type="text"
                                       maxlength="50"
                                       class="form-control" />
                                break;
                        }
                        <span asp-validation-for="Columns[@i].Value" class="text-danger"></span>
                    </div>
                }
            </div>
            <div class="form-group mt-2">
                <button type="submit" class="btn btn-success">Создать</button>
            </div>
        </form>
    </div>
</div>

<div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        function validateColumns() {
            var isValid = true;

            $('#otherColumns .form-group').each(function () {
                var numericInput = $(this).find('input[type="number"]');
                var textInput = $(this).find('input[type="text"]');
                var textarea = $(this).find('textarea');
                var span = $(this).find('span[class*="text-danger"]');

                if (numericInput.length > 0 && (numericInput.val() == '' || isNaN(numericInput.val()))) {
                    isValid = false;
                    span.text("Поле обязательно для заполнения");
                }
                if (textInput.length > 0 && textInput.val().trim() == '') {
                    isValid = false;
                    span.text("Поле обязательно для заполнения");
                }
                if (textarea.length > 0 && textarea.val().trim() == '') {
                    isValid = false;
                    span.text("Поле обязательно для заполнения");
                }
            });

            return isValid;
        }

        $(document).ready(() => {
            $('form').submit(function (e) {
                if (!validateColumns()) {
                    e.preventDefault();
                }
            });
        });
    </script>
}
